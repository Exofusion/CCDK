#
# document for VCE auto-generated reference [sw.c]
#
# Copyright (C) 2000-2005 Community Engine Inc. All rights reserved.
# "PlayStation" is registered trademark
# and is trademark of Sony Computer Entertainment Inc.
#
# For more information, please visit our website at www.ce-lab.net.
#
# $Id: sw.txt,v 1.2 2005/06/29 12:10:08 chiaki Exp $
#

<func>
<name>vce_switchtable_read_from_file
<prototype>int vce_switchtable_read_from_file( const char *fn, switchent_t *sw, int *num )
<cat>tcp
<arch>linux,win32,darwin
<sum ja>コネクションスイッチングテーブルをテキストファイルから読みこむ
<sum en>Read connection switching table from a text file
<arg>char *fn
<argdef ja>
入力ファイル名。
</argdef>
<argdef en>
Path name of input file.
</argdef>
<arg>switchent_t *sw
<argdef ja>
表を読みこむ構造体の配列
</argdef>
<argdef en>
Array of switchent_t which will contain switch entry configuration.
</argdef>
<arg>int *num
<argdef ja>
値結果引数。配列の最大数を渡し、実際に埋めた要素数を返す。
</argdef>
<argdef en>
value-result parameter. Max number of "sw" array is set,
and then returns number of elements actually filled in this array.
</argdef>
<return ja>
成功したら0、失敗したら負のエラーコードを返す。
配列の要素数が足りない場合は、途中まで読みこむことはせずに、
エラーを返す。
</return>
<desc ja>
vce.h で定義されている switchent_t 構造体の配列に、
ファイルからデータを読みこむ。
<B>設定ファイルの書式</B><BR>
<pre>
server=192.168.1.231,8001
server=192.168.1.231,8002
server=192.168.1.230,8003
server=foo.bar.baz.com,8004
</pre>
行頭に"コマンド=" が来てそのあとに設定値が続く、 vce_read_simple_config_file
関数の形式である。
<UL>
<LI>"server" ディレクティブ<BR>
値の各トークンは','で区切る。空白文字等は1文字も入れてはならない。
1個目のフィールドはサーバの IP アドレスである。
IPアドレスは重複してもよい。
2個目のフィールドはサーバの TCP ポート番号である。
<font color="red">ポート番号は重複してはならない。</font>
VCE のコネクションスイッチングでは、
TCPサーバのポート番号を識別 ID として使用し、
それはスイッチに参加している全サーバ間で一意性を保つという仕様と
なっているからである。
この理由は、bind されている port 番号は、VCE やアプリケーション層ではなく、
UNIX の標準的なツール (netstat や lsof)などでも見わけることができるため
メンテナンス性が飛躍的に高まるからである。
たとえば、ポートスキャンツールを使って全プロセスの生存を確認したりできる。
また、 すでに tcpcontext に設定されているポート番号との比較により、
「自分がどのサーバなのか」をまちがいなく自動的に判別できるという利点
もある。
スイッチングを利用するような環境ではサーバの台数が
かなり多くなるため、このような仕様となっている。
</UL>
</desc>
<desc en>
</desc>
<also>vce_switchcontext_create
</func>

<func>
<name>vce_switchtable_show
<prototype>void vce_switchtable_show( const switchent_t *sw, int num )
<cat>tcp
<arch>linux,win32,darwin
<sum ja>コネクションスイッチングテーブルの内容を表示する
<sum en>Display all member of switching table
<arg>switchent_t *sw
<argdef ja>
表示したいスイッチング表(配列)の先頭アドレス
</argdef>
<argdef en>
Top address of switching table(array) to be shown.
</argdef>
<arg>int num
<argdef ja>
スイッチングテーブルの要素数
</argdef>
<argdef en>
Number of elements of switching table array.
</argdef>
<return ja>
なし
</return>
<return en>
None
</return>
<desc ja>
スイッチングテーブルの内容を vce_errout を用いて出力する。
それ以外の入出力は一切しない。
したがってサイレントモードでビルドされているVCEの場合は，
何も出力されない(VCE_ESUPPORTがセットされる)．
また本関数はテキスト出力をするが、
そのフォーマットは予告なく変更されることがあるのでスクリプト等で処理
することはできない。
外部スクリプト等でバージョン独立性の高い処理をしたい場合は、
switchent_t 構造体の配列を自前で出力するルーチンを書くべきである。
本関数はいわゆる "quick debug" 用である。
</desc>
<desc en>
</desc>
<also>vce_switchtable_read_from_file
</func>

<func>
<name>vce_switchcontext_create
<prototype>switchcontext_t vce_switchcontext_create( switchent_t *st, int num, tcpcontext_t fectx, tcpcontext_t svctx, int rjbuf_size, SW_ACCEPTER_POLICY accepter_policy )
<cat>tcp
<arch>linux,win32,ps2,darwin
<sum ja>コネクションスイッチをわりあて、初期化する
<sum en>Allocate and initialize an instance of connection switch context.
<arg>switchent_t *st
<argdef ja>
スイッチ表の先頭アドレス
</argdef>
<argdef en>
Top address of switching table array.
</argdef>
<arg>int num
<argdef ja>
スイッチ表のエントリ数
</argdef>
<argdef en>
Number of elements of switching table array.
</argdef>
<arg>tcpcontext_t fectx
<argdef ja>
フロントエンド(クライアント側用)の通信に使う tcpcontext_t
</argdef>
<argdef en>
instance of tcpcontext_t for frontend (client side) communication.
</argdef>
<arg>tcpcontext_t svctx
<argdef ja>
本体サーバとの通信に使う tcpcontext_t
</argdef>
<argdef en>
instance of tcpcontext_t for backend (server side) communication.
</argdef>
<arg>int rjbuf_size
<argdef ja>
コネクションスイッチ中に、スイッチ元に送りすぎてしまって返ってきた
分のデータをためておく一時バッファのサイズ
</argdef>
<argdef en>
Size of temporary buffer which contains rejected data from
"switching source server".
</argdef>
<arg>SW_ACCEPTER_POLICY accepter_policy
<argdef ja>
クライアントからのコネクションを accept したときに、
どの本体サーバに circ_t を accept させるかのポリシーを設定する。
<ul>
<LI>SW_ACCEPTER_POLICY_TOP : スイッチエントリ表のいちばん上が常に accept.
<LI>SW_ACCEPTER_POLICY_RANDOM : ランダムに選ばれたものが accept.
<LI>SW_ACCEPTER_POLICY_SEQUENTIAL : 表の上から順番に accept.
</ul>
</argdef>
<argdef en>
</argdef>
<desc ja>
スイッチコンテキストを初期化する。
スイッチコンテキストは、フロントエンド用の TCPcontext と、
バックエンドの本体サーバ用の TCPcontext とスイッチ表の情報をもとに
結びつける。
VCE に付属の swp プログラムはこれに
依存している。
</desc>
<desc en>
</desc>
<also>vce_switchcontext_cleanup
</func>

<func>
<name>vce_switchcontext_cleanup
<prototype>void vce_switchcontext_cleanup( switchcontext_t sw )
<arch>linux,win32,ps2,darwin
<sum ja>スイッチコンテキストを解放する
<sum en>Free a switch context
<arg>switchcontext_t sw
<argdef ja>
解放するスイッチコンテキスト
</argdef>
<argdef en>
switch context to be freed
</argdef>
<return ja>
なし
</return>
<return en>
None
</return>
<desc ja>
vce_switchcontext_create 関数で確保、
初期化した スイッチコンテキストを解放する。
vce_switchcontext_create 関数で関連付けている tcpcontext は解放しない。
</desc>
<desc en>
</desc>
<also>vce_switchcontext_create
</func>

<func>
<name>vce_tcpcontext_set_circ_switchwatcher
<prototype>int vce_tcpcontext_set_circ_switchwatcher( tcpcontext_t t, int (*sw)( circ_t, int, char *,int))
<cat>tcp
<arch>linux,win32,ps2,darwin
<sum ja>新しくコネクションスイッチしてきた circ_t を検出する関数を設定
<sum en>set tcpcontext a watcher function for newly switched circ_t
<arg>tcpcontext_t t
<argdef ja>
設定対象となる tcpcontext_t
</argdef>
<argdef en>
target tcpcontext_t
</argdef>
<arg>int (*sw)(circ_t c, int from_id, char *data, int len )
<argdef ja>
コールバック関数。
あたらしくスイッチされてきたコネクションがあると呼びだされる。
</argdef>
<argdef en>
Callback functoin which will be called if new circ_t is allocated.
</argdef>
<return ja>
成功したら0、失敗したら負のエラーコードを返す。
</return>
<return en>
Returns zero if successful, otherwise returns minus error indicator value.
</return>
<desc ja>
本関数の働きは acceptwatcher と類似で、
ほかのサーバからスイッチしてきた circ_t コネクションが tcpcontext
内部で新規に割りあてられてからすぐに呼びだされる。
c は、そうして新規に割りあてられた circ_t である。
from_id は、どのサーバからスイッチしてきたかを示す ID で、
スイッチ設定ファイルの先頭のフィールドの値である。
data と len は、スイッチするときに付帯状況としてスイッチ元の
サーバが付けた情報である。
スイッチするときにはこのような付帯状況を付けないと、
アプリケーションにとっては意味がないからである。<BR><BR>
コールバック関数が負を返すと、そのスイッチを受けいれない。
この機能は、
アプリケーションが同時ログイン人数制限など
いろいろな制限を課すことに使うことができる。
また0を返すと、そのスイッチを受けいれる。
</desc>
<desc en>
</desc>
<also>vce_circ_switch,vce_tcpcontext_set_circ_switchresultwatcher
</func>

<func>
<name>vce_tcpcontext_set_circ_switchresultwatcher
<prototype>int vce_tcpcontext_set_circ_switchresultwatcher( tcpcontext_t t,int (*w)(circ_t,int,int,char*,int))
<cat>tcp
<arch>linux,win32,ps2,darwin
<sum ja>コネクションスイッチの結果を検出するための関数を設定
<sum en>set tcpcontext a watcher function for the result of active connection switch.
<arg>tcpcontext_t t
<argdef ja>
設定する対象となる tcpcontext_t
</argdef>
<argdef en>
target tcpcontext_t
</argdef>
<arg>int (*w)(circ_t c, int result, int dest_sv_id, char *data, int len)
<argdef ja>
結果検出用のコールバック関数。
result: 無事にswitchできたら0、そうでないなら
SWITCH_RESULT 列挙型の値が入る。SWITCH_RESULT は vce.h で定義されている。
dest_sv_id は、どのサーバに移動させようとしたかのID。
data,len は、 vce_circ_switch のときに指定した引数がそのまま入る。
コールバック関数は 0を返すこと。
このコールバック関数は、
コネクションスイッチングによりほかのサーバに移動してしまった
コネクションの後始末するためのものである。
コネクションスイッチ後は closewatcher は呼ばれないので、
必要な後かたづけはこの関数内で実装するべきである。
</argdef>
<argdef en>
</argdef>
<desc ja>
vce_circ_switch 関数をノンブロッキングにするために、
その結果を受けとるためのコールバック関数が必要である。
本関数ではそのコールバック関数を tcpcontext_t に対して設定する。
</desc>
<desc en>
</desc>
<also>vce_circ_switch,vce_tcpcontext_set_circ_switchwatcher
</func>

<func>
<name>vce_circ_switch
<prototype>int vce_circ_switch( circ_t c, int server_id, const char *data, int len )
<cat>tcp
<arch>linux,win32,ps2,darwin
<sum ja>circ_t コネクションを別なサーバにスイッチする。
<sum en>Switch a circ_t to other(or local) servers
<arg>circ_t c
<argdef ja>
スイッチ対象となるコネクション。
</argdef>
<argdef en>
target circ_t
</argdef>
<arg>int server_id
<argdef ja>
スイッチ先のサーバーID.
</argdef>
<argdef en>
ID of "switching destination server"
</argdef>
<arg>char *data
<argdef ja>
スイッチ先のサーバに伝える付帯情報。
ゲームなどアプリケーションでスイッチの処理に付帯させてキャラクタIDなどを
送信したい場合に便利である。
付帯情報には「ポインタ」を入れないこと。
ポインタは他のマシンでは意味をもたないため、
注意が必要である。普通は、各情報の「ID」や「インデックス」や
情報のコピーを入れる。
ほかのサーバでのバイトオーダやアラインメントが異なるときのために、
vce_binary_push_nb_i1 などのバイナリパッカーを用いて情報を圧縮して転送
するのがよいだろう。
なお、circ_t の「状態バッファ」も別にスイッチ先のサーバに転送されるので、
状態バッファの内容だけで十分な場合は、
付帯情報を添付することは必要ないだろう。
</argdef>
<argdef en>
Additional attached information
to be passed to the switch destination server.
This is useful when an application, such as a game,
is needed to send character ID or others accompanying with the
switch process.
Do not include any pointers in this information.
Since pointers make no sense within other machines,
it should be handled with attention.
ID and indexes of respective information,
or copy of information are usually included.
Because the byte order or alignment differs within other servers,
it is preferable that information is compressed with a binary packer,
such as vce_binary_push_nb_i1, and transferred.
Besides, for circ_t's "state buffer" is otherwise transferred to the switch
destination server, additional information need not to be attached
when the contents of the state buffer is enough.
</argdef>
<arg>int len
<argdef ja>
付帯情報の長さ。
</argdef>
<argdef en>
Length of attached data.
</argdef>
<return ja>
処理が成功したら0、失敗したら負のエラーコードを返す。
成功といっても相手のサーバにコネクションがスイッチし終わることではなく、
あくまでスイッチ要求が送信キューに入ったことを意味するだけで、
実際の処理が成功したかどうかは、 vce_tcpcontext_set_circ_switchresultwatcher
関数で指定するコールバック関数を呼ぶ必要がある。
</return>
<return en>
This returns 0 and the negative error code,
when it succeeds and fails respectively.
The success is not that a connection finishes switching to a
destination server, but it means that the switch request
go into transmitting queue.
It is necessary to wait for the callback function specified
in vce_tcpcontext_set_circ_switchresultwatcher
function to check whether actual processing is successful or not.
</return>
<desc ja>
circ_t コネクションを別のサーバに移転させる処理の基本関数である。
コネクションスイッチでは、「付帯情報」のほかに、
「状態バッファ」の内容もコピーされる。
</desc>
<desc en>
This is the basic function for transfer processing of the
circ_t connection to another server.
When switching a connection,
the contents of the "state buffer" are copied, as well as "attached data".
</desc>
<also>vce_tcpcontext_set_circ_switchresultwatcher,vce_tcpcontext_set_circ_switchwatcher
</func>

