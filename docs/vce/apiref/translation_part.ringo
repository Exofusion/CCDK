
------------------------------------------------------
vce_circ_userdata_get_pointer Return definition



------------------------------------------------------
vce_circ_userdata_set_pointer Return definition



------------------------------------------------------
vce_conn_userdata_get_pointer Return definition



------------------------------------------------------
vce_conn_userdata_set_pointer Return definition



------------------------------------------------------
vce_log_get_types arg 1



------------------------------------------------------
vce_log_get_types arg 2



------------------------------------------------------
vce_log_get_types Description



------------------------------------------------------
vce_log_gettime_long arg 1



------------------------------------------------------
vce_log_gettime_long arg 2



------------------------------------------------------
vce_log_gettime_long Description



------------------------------------------------------
vce_log_gettime_normal arg 1



------------------------------------------------------
vce_log_gettime_normal arg 2



------------------------------------------------------
vce_log_gettime_normal Description



------------------------------------------------------
vce_log_gettime_short arg 1



------------------------------------------------------
vce_log_gettime_short arg 2



------------------------------------------------------
vce_log_gettime_short Description



------------------------------------------------------
vce_log_print Description



------------------------------------------------------
vce_log_set_gettime_func arg 1



------------------------------------------------------
vce_log_set_gettime_func Description



------------------------------------------------------
vce_log_set_type_mask_by_name Description



------------------------------------------------------
vce_log_vprint Description



------------------------------------------------------
vce_logwriter_init Description



------------------------------------------------------
vce_logwriter_vprintf Description



------------------------------------------------------
vce_tcpcontext_userdata_get_pointer Return definition



------------------------------------------------------
vce_tcpcontext_userdata_set_pointer Return definition



------------------------------------------------------
vce_conn_get_child_circ Description

ひとつのconn_t に属する仮想回路を配列にコピーして出力する。


------------------------------------------------------
vce_conn_writed Return definition

バッファが全て書き出されていれば1, まだ書き出されていなければ0を返す．


------------------------------------------------------
vce_conn_writed Description

vce_conn_write()をされていても、まだTCPのコネクションにデータが書き出されている訳ではなく実際にはconnの持つバッファーに書き込まれている。
VCEでは、vce_heartbeatを呼び出すことによって可能な限りデータを書き込む。実際にconnに書き込まれたデータが送信されてるかしらべるには、vce_conn_writed()を使用する必要がある。
特に、connをcloseする直前にデータを書き込む場合、vce_conn_writed()で調べてからcloseしないと実際には送信されていない可能性がある。


------------------------------------------------------
vce_errout Description

文字列を標準エラー出力に表示する。ただし、
vce_errout_config 関数によってログ出力ディレクトリが指定されている場合は、
そのディレクトリにも出力し、そのログは自動的に rotate される。
標準エラー出力がない環境では，標準出力に出力される．


------------------------------------------------------
vce_log_add_monitor_command Description

以下の二つのコマンドを追加する
set_logmask, get_log_types


------------------------------------------------------
vce_log_add_type Description

ログタイプを追加する。
ログタイプは、ログの種類を表す文字列で、検索のキーとして利用される。


------------------------------------------------------
vce_log_get_types Description



------------------------------------------------------
vce_log_gettime_long Description



------------------------------------------------------
vce_log_gettime_normal Description



------------------------------------------------------
vce_log_gettime_short Description



------------------------------------------------------
vce_log_init arg 1

printf_funcには、ログ表示をするための関数
printfと同じプロトタイプなので、vce_erroutを指定する場合は、(printf_func_t)vce_errout とキャストする必要があります。


------------------------------------------------------
vce_log_init Description

VCE Logの初期化を行います。


------------------------------------------------------
vce_log_parse Description

VCEログフォーマットに基くログから各情報を取り出す。VCEログフォーマットについては、<a href="monitor.html">「VCEモニタリング」</a>を参照。


------------------------------------------------------
vce_log_print Description



------------------------------------------------------
vce_log_set_gettime_func Description



------------------------------------------------------
vce_log_set_type_mask Description

maskにはログタイプに対応するビットを立てた数値を指定する。


------------------------------------------------------
vce_log_set_type_mask_by_name Description



------------------------------------------------------
vce_log_vprint Description



------------------------------------------------------
vce_logwriter_connect Description

この関数を呼んだあとに、vce_logwriter_poll()を繰り返すことにより、ログライターがrsvにログを書き込めるようになります。
ただし、それまでのログも一部はバッファにため込まれ、接続した瞬間に書き出されます。
admsvの検索機能と連係させるには、IDには、サービスポート(admcli.exeのプロセスWindowのPortの項目にでる数値)を指定してください。この値をもとに、admsvはバインディングを行います。


------------------------------------------------------
vce_logwriter_init Description



------------------------------------------------------
vce_logwriter_poll Description

vce_logwriter_connect()を呼んだ後に、この関数を定期的に呼ぶことで接続や、切断された際の再接続を行います。
vce_heartbeat()の度に呼んで下さい。


------------------------------------------------------
vce_logwriter_printf Description

ログをrsvに書き込む。
接続されていない場合は、バッファに入る限りはバッファにため込み、vce_logwriter_pollで接続した瞬間に書き込む。


------------------------------------------------------
vce_logwriter_vprintf Description



------------------------------------------------------
vce_protocol_acceptwatcher_noop Description

この関数は vce_tcpcontext_create の引数に指定される。
0を返すとデフォルトの動作と同じであるため、
NULL を指定したのと同じことになる。


------------------------------------------------------
vce_read_plain_text_file Description

入力テキストファイルの各行を読みこむごとにコールバック関数を呼びだし、
実際の入力データの処理はそのコールバック関数で実行する。
本関数は行番号などデバッグに役立つ情報を付加してコールバック関数を呼びだし、
コールバック関数が負を返したら処理を中断する。
vce_read_simple_config_file 関数をさらに単純にしたものである。
なお、空行は読みとばされる。


------------------------------------------------------
vce_read_simple_config_file Description

vce_read_simple_config_file は入力ファイルを1行づつ読みこみ、
各行に
<pre>
PARAMNAME=VALUE
</pre>
という形式(イコール'='でパラメータと値を並べたもの)を発見するごとに
指定されたコールバック関数を呼びだす。
イコールの前後では空白文字は存在できない．
またPARAMNAME は必ず行頭からはじまらなければならない．
文字列のエスケープには対応していないので，
改行をデータ中に入れることはできない．
コールバック関数のプロトタイプは
<pre>
int (*callback)(char *filename, int lineno, char *param, char *value )
</pre>
であり、 filename は設定ファイル名、 lineno は入力ファイルの中の行番号、
char *param はパラメータ名、 char *value は設定値である。
value に改行記号は含まれない。
また、 "\r\n" で終わる行も "\n" で終わる行も同じように読みこむことができる。
<BR>
1行の長さを最大32キロバイトと仮定している。
それを越える長さの行があった場合は、
越える分については読みこまれない。
また、コールバック関数が負を返すと、
本関数も負を返す。返り値は、コールバック関数が返した値と同じである。
本関数は，標準入出力(stdioのFILE構造体)をそのまま使用するので，
標準入出力が使用できない環境では動作しない．


------------------------------------------------------
vce_replace_malloc_funcs Description

VCEがメモリ割りあて/解放に使う関数を置きかえる。
アプリケーションによっては、メモリ管理を一元化したい場合や、
メモリ関係の性能監視のために malloc/free 関数を再定義したい場合がある。
本関数ではそのような場合に関数ポインタを指定することで
置きかえることができる。
デフォルトでは、 割りあて関数は malloc, 解放関数は free となっている。
本関数は、 vce_initialize 関数より前に呼びだすことが可能である。


------------------------------------------------------
vce_save_statlog Description

VCEの動作状況を統計したテキストファイルを出力する。
VCEがチューニングモードで動作しているときは、
精密な時間計測の結果も出力される(Version 1.0で対応)。


------------------------------------------------------
vce_set_heartbeat_wait_flag Description

vce_heartbeat の sleep 時間調整機構を操作する。
flag に1を設定すると、vce_heartbeat は、
最高100ミリ秒、
ネットワークからの入力がない場合 select で待つようになる。
デフォルトでこの機能は off である
(なぜなら、ちゃんとしたアプリケーションならその機構をアプリケーションの
側で持っていることが多いから)。
このループ速度調整機能は，最低速度を100ミリ秒としているが，
現在の実装では，実際には数十分かけてその速度に落ちつくことになる．
つまり，VCEは急激にループ速度を変更することはせず，
パケットを受けるとループ速度を2倍にし，
パケットを受けないと非常にゆっくりとしたペースで速度を落としていく．


------------------------------------------------------
vce_set_internal_timer Description

Windows, PS2 やその他組みこみ用の OS 上で動作する VCE では、
time() や gettimeofday() などUNIXライクな方法では
現在時刻を取得できない場合がある。
このようなシステムにおいて、正確な「秒」によるタイムアウトを実現
するためには、
アプリケーションが何らかの方法で時刻と等価な値
(1秒に1づつ増えれば数値の意味は問わない)を更新し続けるようにするのがよい。
本関数は、TCPコネクションのタイムアウトやログ出力に使われる VCE の
内部タイマを 1秒に1回(複数回でもよい)更新するための関数である。
linux,win32 環境ではこの関数を使用しても何も起こらず
VCE_ESUPPORT がセットされる。


------------------------------------------------------
vce_set_mainloop_callback Description

vce_mainloopから定期的に呼びだされるコールバック関数。
vce_mainloopを呼びだすと通常永久ループに入るが、
vce_mainloopを利用しつつもアプリケーションで並行に処理をしたい場合は
この関数を使用する。VCEが通常の負荷の状態のときは、
約10ミリ秒に1回以上のタイミングで呼びだされることになる。
<BR>
また、コールバック関数が0以外を返すとvce_mainloopが終了する。


------------------------------------------------------
vce_set_mainloop_callback Sample

<pre>
  #include "vce.h"
  int callbk( void )
  {
      printf( "callback function is called.\n" );
  }
  int main( int argc, char **argv )
  {
      // 何らかのコード
      vce_set_mainloop_callback( callbk );
      vce_mainloop();
  }
</pre>


------------------------------------------------------
vce_set_read_write_log_mode Description

ログ出力をするように設定すると、 vce_errout と同じストリームに対して、
何番(ディスクリプタ)のストリームに対して何バイト出力したかの値と、
実際のデータのダンプ(16進数)を出力する。
この出力はVCEのバージョンによって変化するかもしれないため、
あくまで人間が目視でデバッグするために使うのが望ましい。


------------------------------------------------------
vce_set_socket_library_ok Description

VCE は socket ライブラリに依存しているが、
UNIX 以外のアーキテクチャの場合、socket ライブラリはアプリケーションの
初期化時、 vce_initialize や vce_tcpcontext_create
の呼びだし時には初期化されていない可能性がある。
ところがこれらの関数(入出力はしないがメモリ確保をする関数)はできるだけ
プログラムの呼びだし時に行っておきたい。
本関数を使うことによって、アプリケーションがメインループに入った後に、
入出力をするようにできる。
具体的には、 flag が0の時は、 vce_heartbeat は何もしない。また
send/recv/accept/bind/listen/connect/socket/shutdown/close
などといった処理はすべて呼びださない。
なお POSIX(Linux,FreeBSD) 環境においては、
このフラグは最初から1に設定されているので、
本関数を呼びだす必要はない。
Win32 環境においては、
VCE 内部で winsock の初期化が成功したら自動的に1 に設定される。
PS2 環境においては、デフォルト値は0なので、
USB Ether もしくは modem などのデバイスの
初期化が終了した時点で vce_set_socket_library_ok(1) を呼びだす必要がある。
VCE が内部的に保存しているこのフラグの値は、
vce_initialize の呼びだし後に意味をもつので、
アプリケーションはまず vce_initialize を呼びださなければならない。


------------------------------------------------------
vce_set_udp_connect_retry_interval arg 1

設定するミリ秒単位の間隔


------------------------------------------------------
vce_set_udp_connect_retry_interval Description

vce_udp_connect 接続したときの接続チェック間隔時間の設定する。


------------------------------------------------------
vce_set_verbose_mode Description

verbose モードの設定は、動的に変更できる。
この関数は、 vce_initialize 関数の出力もverboseにできるように、
vce_initialize 関数の呼びだし前に呼びだすことができるようにできている。<BR>
モードを1にするとVCEライブラリの中に埋めこまれている、
冗長なメッセージも出力されるため、
遅い回線を通してエラーメッセージを見るときは注意が必要である。


------------------------------------------------------
vce_set_verbose_mode Bugs

TODO verbose モードの仕様は、
アプリケーションとVCE自体の出力を自由に調整できるように、
柔軟に設定をできるようにしていく予定である。
現在はmodeの値は0か1のみが使える。


------------------------------------------------------
vce_sha1_buffer_checksum Description

あるメモリ領域のチェックサムを求めるために使用する。
出力は40桁のASCII 16進数文字列である。
"0a4479cd9f99dd9384482fffffcfe923884491af"
という感じの文字列が出力される。


------------------------------------------------------
vce_sha1_file_checksum Description

ファイルのSHA-1チェックサムを求める。SHA-1 は Secure Hash Algorithm の略で、
堅牢なハッシュアルゴリズムとされる。
ファイルの中身が壊れていないかどうかを効果的に調べることができる。


------------------------------------------------------
vce_snprintf Description

UNIX のlibc(glibc) に含まれている snprintf は、
UNIX 以外の環境では、異なるインターフェイスを持っていたり、
そもそも存在しなかったりする。 snprintf はバッファオーバーフロー攻撃を
防ぐためには必要不可欠な関数なので、 VCE ではこれらのプラットフォームの
コードを安全にするために、 vce_snprintf を使うことを推奨する。


------------------------------------------------------
vce_snprintf Bugs

linux,win32 以外の環境においてはこの関数は
sprintf と同等の機能しか持っていない．
(バッファ管理のミスによりバッファーオーバーフロー攻撃される可能性がある)。
そのためアプリケーション側で対処する必要がある．


------------------------------------------------------
vce_strerror Description

vce.h に定義されているエラーコードを，同様に定義されている
文字列に変換する．
サイレントモードでコンパイルされているVCEの場合は，
本関数は空の文字列を返すし，LAST_ERROR に VCE_ESUPPORTを設定する．


------------------------------------------------------
vce_strerror_close_reason Description

vce.h に定義されているエラーコード(CLOSE_REASON)を，同様に定義されている
文字列に変換する．
サイレントモードでコンパイルされているVCEの場合は，
本関数は空の文字列を返す．


------------------------------------------------------
vce_tcpcontext_add_circ_ipv4_filter arg 2

送信元クライアントのネットワークアドレス。
"192.168.1.0"のような文字列を指定する。
内部でDNSを使用するのでFQDN を指定してもよい。
なおDNSは初期化時に１回だけなので負荷は少ない。


------------------------------------------------------
vce_tcpcontext_add_circ_ipv4_filter arg 4

FILTER_POLICY_ACCEPT, FILTER_POLICY_DENY, FILTER_POLICY_LOG を OR 演算
することによって指定する。通常は、
<pre>
FILTER_POLICY_ACCEPT
FILTER_POLICY_DENY
FILTER_POLICY_ACCEPT | FILTER_POLICY_LOG
FILTER_POLICY_DENY | FILTER_POLICY_LOG
</pre>
の4種類のうちのどれかである。ほかにもオプションを付けていく場合は、
OR演算子で連結していく。


------------------------------------------------------
vce_tcpcontext_add_circ_ipv4_filter Description

基本的な動作は、 vce_tcpcontext_add_conn_ipv4_filter と同じだが、
中継サーバに接続する仮想回路に対する設定である点が異なる。


------------------------------------------------------
vce_tcpcontext_add_ipv4_filter arg 2

送信元ネットワークアドレス。 "192.168.1.0" のような文字列を指定する。
FQDNを指定すると内部でDNSを使用して名前を解決する。
なおDNSは初期化時に１回だけなので負荷は少ない。
アクセスチェック時に DNS を引きなおすことはない。


------------------------------------------------------
vce_tcpcontext_add_ipv4_filter arg 4

FILTER_POLICY_ACCEPT, FILTER_POLICY_DENY, FILTER_POLICY_LOG を OR 演算
することによって指定する。通常は、
<pre>
 FILTER_POLICY_ACCEPT
 FILTER_POLICY_DENY
 FILTER_POLICY_ACCEPT | FILTER_POLICY_LOG
 FILTER_POLICY_DENY | FILTER_POLICY_LOG
</pre>
の4種類のうちのどれかである。ほかにもオプションを付けていく場合は、
OR演算子で連結していく。


------------------------------------------------------
vce_tcpcontext_add_ipv4_filter Description

TCPコンテキストのIPソースアドレスフィルターの動作については、
tcp のカテゴリ説明を参照。
重要な点は、
フィルタをひとつも設定していない状態ではすべての接続を受けいれるが、
ひとつでも設定した時点で、デフォルトの動作が変化してすべての接続を
受けいれなくなる点である。これは設定ミスによるセキュリティホールを
最小限に食いとめるためである。


------------------------------------------------------
vce_tcpcontext_circ_iterate arg 2

tcpcontext_t が持っている各 circ_t に対して、指定した関数を呼びだす。


------------------------------------------------------
vce_tcpcontext_circ_iterate Description

コールバック関数の引数には、仮想回路の各要素が与えられる。
コールバック関数が負を返すとループを途中で終了する。
0以上の値を返すとループを継続する．


------------------------------------------------------
vce_tcpcontext_cleanup Description

VCEライブラリ中に保存されているTCPコンテキストの構造体を1個解放する。
VCEライブラリが管理できる tcpcontext 構造体の数は制限があるので、
vce_tcpcontext_cleanup 関数で解放せずに vce_tcpcontext_create を
くりかえすと、資源が足りなくなり VCE_EFULL を返すようになる。


------------------------------------------------------
vce_tcpcontext_clear_circ_ipv4_filter Description

TCPコンテキストに設定されている、仮想回路(circ_t)のIPフィルタ設定を初期化し、
デフォルトの状態に戻す。


------------------------------------------------------
vce_tcpcontext_clear_conn_ipv4_filter Description

TCPコンテキストに設定されている、通常のコネクション(conn_t)に対する
IPソースアドレスフィルタを初期化し、デフォルトの状態に戻す。


------------------------------------------------------
vce_tcpcontext_conn_iterate Description

コールバック関数の引数には、コネクション(conn_t)の各要素が与えられる。
コールバック関数が負を返すとループを途中で終了する。
0以上の値を返すとループを継続する．


------------------------------------------------------
vce_tcpcontext_connect Description

言うまでもなくconnectはクライアントソケットにだけ許された機能なので、
クライアントコンテキストの場合のみ利用可能である。
また vce_tcpcontext_connect 関数は、内部で conn_t を1個割りあてて初期化
するときに tcpcontext_t から、parser と callback の情報をコピーするので、
vce_tcpcontext_connect の呼びだし以前に vce_tcpcontext_set_parser を
呼びだしておく必要がある。
なお，クライアントから connect をするときには，
tcpcontext がノンブロッキングモードに設定されている場合と，
そうでない場合で成功確認方法が異なる．
これについては<a href="connect.html">クライアントからの接続</a>
を参照．


------------------------------------------------------
vce_tcpcontext_count_connections Description

1個の tcpcontext が管理しているコネクションの数を数える．
conn_t と circ_t を別々に数える．


------------------------------------------------------
vce_tcpcontext_create arg 8

暗号化コネクションを利用したい場合は、
VCE_BLOCK_CIPHER_BLOWFISH,VCE_BLOCK_CIPHER_RIJNDAEL,VCE_BLOCK_CIPHER_TWOFISH
のいずれかの値を指定する。利用しない場合は、
VCE_BLOCK_CIPHER_NONE を指定する。
暗号強度と性能に関しては<a href="bench.html">こちら</a>を参照.


------------------------------------------------------
vce_tcpcontext_create arg 10

nonblock_connect は、クライアントコンテキスト専用で、
新しくconnect()システムコールを用いて接続を構築するときに、
TCPコネクションが完成するまでブロックするかどうかを指定する。
1だとブロックしない(nonblock)、0だとブロックする。
ブロックするようにすれば、
アプリケーションのプログラムを多少単純にすることができる。
ただし，VCEのアプリケーション開発においては，
「ノンブロッキング接続」が推奨される．
ゲームクライアントなどのアプリケーションにおいては，
確実にノンブロッキングモードを使用するべきである．
この理由については，<a href="connect.html">クライアントの接続について</a>
が参考になるだろう．


------------------------------------------------------
vce_tcpcontext_create arg 11

ソケットに対してTCP_NODELAY オプションを使うかどうかを指定する。
nodelayを1にすると TCP_NODELAY オプションをつけ、0にすると付けない。
TCP_NODELAYオプションによって、OSがTCPパケットをネットワークに送りこむ
までの溜め時間が短かくなる。(Negelアルゴリズムのキャンセル)
ただし、小さなパケットを連続で送る場合は、
ネットワーク利用効率が下がるので注意が必要である。
特に小さなパケットを高速にやりとりしたい場合以外は、0にするべきである。


------------------------------------------------------
vce_tcpcontext_create arg 12

状態をもつプロトコルの場合、この引数に0より大きい値を指定し、
状態管理のための領域をVCEに管理させることができる。
ベクトライザを使う場合は vce_circ_get_state, 使わない場合は
vce_conn_get_state 関数を使用することにより、
状態管理領域へのポインタを取得することができる。


------------------------------------------------------
vce_tcpcontext_create Description

TCPコンテキストの実体をVCE内部に(128個まで)初期化し、
通信に必要なすべての初期化を行なう。
この関数が返す tcpcontext_t 型は、今後の処理
(現在は vce_tcpcontext_cleanupのみ)で使用する。
VCE は vce_tcpcontext_connect など新規コネクションを初期化するような
処理をするときに tcpcontext_t の設定をコピーして使用するため、
vce_tcpcontext_connect の後に vce_tcpcontext_set_??? のような関数を
使って設定を変更しても、
connect で得られたコネクションには設定が反映されない。
したがってコーディング時には、できるだけ tcpcontext の設定は
vce_tcpcontext_create の直後に集中させるようにすることが大切である。
またブロック暗号を使用する場合は、
8バイトや16バイトといったブロックの長さに丸めて通信されるので、
短かいデータを送信する場合は、限界性能に微妙に影響が出る場合がある。
ただし TCP のヘッダが40バイトあることを考えると、
その部分に凝るのはそれほど意味があるとは思えない。
<BR>
<B>送受信バッファを小さくするときの注意</B><BR>
PS2 などのメモリが少ない環境において，
使用メモリを極限まで節約するために，
tcpcontext の「受信バッファ量」と「送信バッファ量」
を小さくしたいことは多い．
ところが，このふたつの量を小さくしていくと，
様々な問題が起こり得る．
「送信バッファ」に関しては，
1回のプロトコル送信で送信したい量よりも小さくすると，
その送信が失敗するので，アプリケーションが1回のプロトコルで送りたい
量を下回らないようにする必要がある．
「受信バッファ」に関しても同様だが，
暗号を使う場合に独特の注意点がある．
それは，VCEは，heartbeatが呼びだされてから次の heartbeat
が呼びだされるまでの間に conn_write (circ_write) された
データに関しては，ひとつにまとめて暗号化することがある点だ．
たとえば，次のheartbeat呼びだしまでの期間に，
サーバーが1KBのデータを20回送ると， 20KBが1個の塊として暗号化され，
クライアントの読みこみバッファが10KBしかなかったとすると，
そのバッファを使って暗号を解読することができなくなる．
暗号解読は読みこみバッファの空きを使って処理されるからである．
ちなみに，暗号化の最大パックサイズは32KBバイトなので，
受信側の読み込みバッファが32KB+8以上あれば，
どんな場合でも間違いなく暗号を解読できる．
送信する速度と，
受信側の読みこみバッファの量は，関係があるのである．
したがって，「バルク転送をしたい場合は，
受信側に十分な(32KB以上の)読みこみバッファを用意せよ．」
ということになる．


------------------------------------------------------
vce_tcpcontext_delete_circ_ipv4_filter Description

vce_tcpcontext_add_circ_ipv4_filter 関数で指定したフィルタの設定と
全く同じ設定値を用いて、フィルタを取りのぞく。
設定値がみつからない場合や引数が無効な場合は、負のエラーコードを返す。


------------------------------------------------------
vce_tcpcontext_delete_conn_ipv4_filter Description

vce_tcpcontext_add_conn_ipv4_filter 関数で設定したフィルタの設定と
全く同じ設定値を用いて、フィルタを取りのぞく。
設定値がみつからない場合や引数が無効な場合は、負のエラーコードを返す。


------------------------------------------------------
vce_tcpcontext_enable_accept Description

サーバを人為的に終了させるときなどに、
新たなユーザがログインしてこないように、
新規に accept しないようにしたいことがある。
本関数はそのために使用する。
verbose モードのときはログを出力する(verbose mode only)。


------------------------------------------------------
vce_tcpcontext_get_all_circuit Description

ひとつのtcpcontext に属する仮想回路を配列にコピーして出力する。


------------------------------------------------------
vce_tcpcontext_get_all_connection Description

ひとつのtcpcontext に属するコネクションを配列にコピーして出力する。


------------------------------------------------------
vce_tcpcontext_get_stat Description

TCPコンテキストが内部的に管理している統計情報を取得する。
この情報はデバッグやログなど幅広く活用される。
以下はtcpcontext_stat_t構造体メンバの説明である。
<ul>
<LI>current_conn, current_circ<BR>
現在活動中のコネクションの数。 current_conn は conn_t の数で、
current_circ は circ_t の数である。
<LI>recv_byte, send_byte<BR>
合計の送受信バイト数
<LI>recv_syscall, recv_syscall_e<BR>
recv()システムコールの呼びだし回数。 _e はエラー呼びだしの回数
<LI>accept_syscall, accept_syscall_e, send_syscall, send_syscall_e,
connect_syscall, connect_syscall_e<BR>
各システムコールの呼びだし回数。
<LI>conn_write<BR>
vce_conn_write の呼びだし回数
<LI>conn_timeout<BR>
conn_t がタイムアウトした回数。
<LI>tcpcontext_connect<BR>
vce_tcpcontext_connect が成功した回数。
</ul>


------------------------------------------------------
vce_tcpcontext_is_circ_mode Description

VCEをRuby,Javaなどの言語で利用できるようにするための拡張ライブラリを作る
場合に、TCPコンテキストのポインタからTCPコンテキストの種類を得るための
関数である。通常のアプリケーションからは使うことは少ないだろう
(あらかじめ種類はアプリケーションプログラム側でわかっているはずなので。)


------------------------------------------------------
vce_tcpcontext_set_circ_acceptwatcher Description

TCPcontextが新しい仮想回路を受けいれるたびにこの関数(aw)を呼びだすように
設定する。アプリケーションにおいて新規接続をすべてログしたり、
状態バッファを初期化したりしたいときに役だてることができる。


------------------------------------------------------
vce_tcpcontext_set_circ_closewatcher Description

仮想回路が切断されたときに呼びだされるコールバック関数を設定する。
アプリケーション以外の理由で強制的に切断されたときの処理などに使用する
ことができる。
クローズの理由を reason 引数から推定することができる．


------------------------------------------------------
vce_tcpcontext_set_circ_finalizer Description

TCPコンテキストが管理している仮想回路が解放されようとしているときに
1回だけ呼びだされるファイナライザを指定する。
この関数は主にRubyやJavaなど、他の言語用のwrapperライブラリのために
用意されている。アプリケーションからは、closewatcher を使うので十分である。


------------------------------------------------------
vce_tcpcontext_set_circ_parser Description

仮想回路にデータが来た場合にそれをパースして仮想回路用のコールバック
関数を呼びだすためのパーサと、そのパーサが呼びだすコールバック関数を
同時に設定する。現在は、標準のパーサとして、
<pre>
vce_vecprotocol_parser_bin16
vce_vecprotocol_parser_text
vce_vecprotocol_parser_through
</pre>
がVCEに含まれている。
また、VCEに標準添付されているコールバック関数は
<pre>
vce_vecprotocol_pcallback_echo_bin16  仮想回路上でbin16プロトコルを使う
vce_vecprotocol_pcallback_echo_text  仮想回路上で改行レコードを使う
vce_vecprotocol_pcallback_echo_through 仮想回路上でデータをそのままecho
</pre>
がある。


------------------------------------------------------
vce_tcpcontext_set_conn_acceptwatcher Description

サーバーコンテキストが新しい接続を受けいれたときに、
この関数が1回呼びだされる。
アプリケーション開発者はこの関数を置きかえることによって、
接続を受けいれた場合にログを出力したり、アドレス制限をかけたりできる。
このコールバック関数が負を返すと、
VCEは接続受けいれ拒否と判断し、closeする。
暗号化コネクションを使用しているときは、暗号ネゴシエーションが終了してから、
acceptwatcher が呼びだされる。


------------------------------------------------------
vce_tcpcontext_set_conn_call_parser_per_heartbeat Description

デフォルトの状態では、プロトコル・パーサは、 vce_heartbeat 関数の中で、
ネットワークからの入力を確認して1レコード分の情報がそろっている事が
確認されると、1回だけコールバック関数を呼びだす。
本関数を使ってその最大回数を制御することができる．
引数 v で指定した回数まで， 1回の heartbeat で複数回のコールバックが
呼びだされるようになる．
本関数は，クライアントおよびサーバーの性能チューンにおいてまず
注目される点である．


------------------------------------------------------
vce_tcpcontext_set_conn_closewatcher arg 2

close 監視関数。conn_t c には、閉じられようとしているコネクションが入る。
reason には， CLOSE_REASON 列挙体で定義されている定数が代入される．


------------------------------------------------------
vce_tcpcontext_set_conn_closewatcher Description

何らかの理由で接続がcloseされてしまったときに1回だけ呼びだされる関数。
VCEではこのように呼びだされる関数は close watcher と呼ばれ，
conn_t でも circ_t でも同様に使われる．
アプリケーション開発者がこの関数本体を定義する
ことによって、ソケットが閉じられたことをログしたりできる。
close watcher は呼びだされるときの原因に応じて reason 引数に，
何が原因だったのかをあらわす定数が代入される．
アプリケーションではこの値をみて，closeの原因を推定できる．
reason の内容は，以下の通りである．
以下ではそれぞれを
「リモート型」と「ローカル型」に分けて，
問題を迅速に切りわけられるようにした．

<ul>
<LI>CLOSE_REASON_NONE (-1)<BR>
VCEが内部的に使用する．これが返されるのは， VCE のバグが考えられる．

<LI>CLOSE_REASON_UNKNOWN (0)<BR>
原因不明．基本的に返されることはない．
返された場合は，VCEのバグが考えられる．

<LI>CLOSE_REASON_REMOTE (1)<BR>
リモートピアによってコネクションが切断されたため，
書きこみも読みこみもできなくなった．
CLOSE_REASON_REMOTE は，リモート型の中で，特に分類できなかった場合の
generic な理由のときに返される．

<LI>CLOSE_REASON_APPLICATION (2)<BR>
アプリケーションによって， vce_conn_close などが呼びだされた．
「ローカル型」の典型的なクローズ理由である．

<LI>CLOSE_REASON_TIMEOUT (3)<BR>
タイムアウト時間になるまで，送受信が行われなかったため，
切断された．タイムアウトの場合は，リモートが原因なのか，
ローカルが原因なのか，判別はつかない．

<LI>CLOSE_REASON_DECODER (4)<BR>
暗号デコーディング関数の内部でエラーが起きた．
相手から送られてきたデータのフォーマットが異常であるか，
データレコードが必要としている分のデータが届かない間にコネクションが
利用不可能になってしまった場合に起こる．
つまり，このエラーは，「リモート型」である．
このエラーは，コネクション初期化時の暗号ネゴシエーションが終わり，
データの交換が始まってから起こる．

<LI>CLOSE_REASON_ENCODER (5)<BR>
暗号エンコーディング関数の内部でエラーが起きた．
このエラーは，コネクション初期化時の暗号ネゴシエーションが終わり，
データの交換が始まってから起こる．
VCE は暗号化用に特別なメモリを使わないこともあり，この理由は
「リモート型」である．


<LI>CLOSE_REASON_PARSER (6)<BR>
プロトコルパーサー関数が負の値を返したので，
コネクションを切断した．
これは，ローカル型である．ローカルのパーサー関数の返り値が負であった．

<LI>CLOSE_REASON_INTERNAL (7)<BR>
VCE の内部的な問題により，コネクションを閉じた．
VCEの内部メモリが足りない場合や，エラーチェックに
失敗した場合や，VCEのバグが考えられる．
ローカル型である．

<LI>CLOSE_REASON_FULL (8)<BR>
SWPを使っている場合に，SWPへ送る送信バッファが一杯になっている場合に
この値になる．SWPへ送る送信バッファが一杯ということは，
SWPのサーバーからの受信バッファも一杯になっている可能性が高い．
SWPのバッファー容量を大きくするか，
相手むけ回線の容量が一杯になっていることを疑うべきである．
リモートホストのバッファが一杯になっていることから，
「リモート型」と言える．

</ul>

<BR><BR>
現在、コールバック関数の返り値は無視される。
close watcher は，すでに完成しているコネクションに対してだけ呼びだされる．
言いかえれば，暗号化コネクションを使用しているときに、
暗号ネゴシエーションが終了する前にコネクションが切断された場合、
close watcher は呼びだされない．
その場合でも、 fainalizer は呼びだされる。
<BR>
なお，close watcher の引数はVCE バージョン 0.4.73 から追加されたが，
過去のバージョンの close watcher を渡してもコンパイラ警告が出るだけで
問題は起きない．


------------------------------------------------------
vce_tcpcontext_set_conn_finalizer Description

TCPコンテキストが管理しているTCPコネクションが解放されようとしているときに
1回だけ呼びだされるファイナライザを指定する。
これは、Rubyなど高級言語でTCPのコネクションをガベージコレクタに追跡
させたいときなどに有用である。vce_tcpcontext_create 関数を呼びだして
tcpコンテキストを初期化した後に呼びだすこと。
この関数は主にRubyやJavaなど、他の言語用のwrapperライブラリのために
用意されている。アプリケーションからは、closewatcher を使うので十分である。
注意点としては、暗号化コネクションを使用しているときに、
暗号ネゴシエーションが終了する前にコネクションが切断された場合に、
closewatcher は呼びだされないが、 finalizer は呼びだされる点である。


------------------------------------------------------
vce_tcpcontext_set_conn_hiwater_acceptwatcher Description

サーバーコンテキストが新しい接続を受けいれたときに，
同時接続数がある数以上の場合に，
指定した接続監視関数を呼びだすように設定する．
VCEでは，この数のことを「高水位設定値」"high water"と呼んでいる．
この機能を使うことによって，サーバーが混雑しているときに，
ユーザーが単に接続できないようになるのではなく，
「現在混雑しています．」などといったメッセージを送信することが可能となる．
たとえば，絶対的最大数が1000に設定されているゲームサーバーの場合は，
900あたりにこの値(water)を設定しておき，
900本目以降の接続に関してはここで設定した専用の監視関数を使うことで，
独自のプロトコルシーケンスを発行することができる．
高水位接続監視関数が呼びだされた場合は，
通常の接続監視関数は呼びだされない.
また高水位接続監視関数の返り値は，通常の接続監視関数の返り値と同様に
扱われる．つまり，負を返すと接続を拒否する．


------------------------------------------------------
vce_tcpcontext_set_conn_parser Description

通常のTCPコネクション(conn_t)からの入力をパースしてレコードを取りだす
パーサ関数を指定する。VCEでは、
レコード境界を判定してレコードを取りだす方法を挿しかえることができるように、
関数へのポインタを設定できるようになっている。
VCEでは、標準的な方法でレコード境界を判定するためのデフォルトパーサとして、
<pre>
vce_protocol_parser_bin16            標準的なbin16パーサ
vce_protocol_parser_text             改行記号をレコード境界とするパーサ
vce_protocol_parser_through          何も処理せず、そのまま渡すパーサ
vce_protocol_parser_vecmain_server   vecproxy用パーサ
</pre>
以上の2つのパーサを実装しているので、通常のアプリケーションでは、
これらのパーサを利用すればよい。
またパケットベクトライズ(中継サーバ)を使用する場合は、
vce_protocol_parser_vecmain_server をパーサに指定し、
さらに vce_tcpcontext_set_circ_parser も呼びだして
circ_t 用のパーサを指定することも必要である。<BR>
また、 pcallback はパーサによって呼びだされるコールバック関数で、
引数として data, len を用いてレコードの中身(レコード境界を除く)
を与える。これも単純なものはVCEに標準添付されていて、
<pre>
vce_protocol_pcallback_echo_bin16    bin16でエコーするコールバック
vce_protocol_pcallback_echo_text     改行レコードでエコーするコールバック
vce_protocol_pcallback_noop          データを捨てるコールバック
vce_protocol_pcallback_dump          データを表示するコールバック
</pre>
が利用できる。
通常はユーザーがアプリケーションごとにコールバック関数を定義し、
その関数でデータを適切に処理する。
コールバック関数が負を返したら、VCEはプロトコルエラーと判断し、
TCPコネクションを自動的に切断する。
コールバック関数がゼロ以上を返すと，正常終了と見なすが，
vce_tcpcontext_set_conn_call_parser_per_heartbeat 関数を使って
1回の heartbeat あたりの最大コールバック呼びだし回数を変更している場合，
ゼロとそれ以上の値では意味が異なる．
詳細は  vce_tcpcontext_set_conn_call_parser_per_heartbeat
関数のリファレンスを参照．
<BR><BR>
また、パーサを自前で定義するようなアプリケーションの場合
(bin16でもbin32でもtextでもなく、まったく新しいプロトコルを定義したい場合)
はパーサ関数を自前で定義してこの関数でパーサとして設定することになる。
その場合はコールバックを使用することができないため、
<pre>
vce_tcpcontext_set_conn_parser( t, parser, NULL );
</pre>
のようなコーディングをすることになる。



------------------------------------------------------
vce_tcpcontext_set_conn_safety_read arg 2

書きこみ(送信)バッファのパーセントを0から100の値で指定。
負や101以上の値を指定するとエラーとなる。
書きこみバッファがこのパーセント<b>以上</B>空いているとき<B>だけ</B>、
読みこみ処理をする。読みこみ処理とは、ソケットからの読みこみと、
パーサやコールバック関数の呼びだしである。
0を指定すると、常に読みこみ処理をし、100を指定すると、
書きこみバッファが完全に空の場合だけ読みこみ処理をする。


------------------------------------------------------
vce_tcpcontext_set_conn_safety_read Description

ネットワークアプリケーションにおいて、
送信のためのバッファが一杯になっている場合は、
以下のような状況が考えられる。
<ol>
<LI>クライアントが処理を継続できない状態になった。
<LI>経路の途中に障害が発生し、通信が遅延している。
<LI>そもそもデータを送る量が多すぎる。
</ol>
VCEでは、「レコード」単位でコールバックを呼びだすプロトコルを主にターゲット
としているが、そのようなプロトコルをデザインする場合、
以下の状況がかならず発生する。
<ol>
<LI>サーバにおいて、クライアントから要求を受けとった。
<LI>それを処理し、クライアントへ処理結果を送りかえす。
<LI>しかし、送信バッファが一杯のため、送信できない。
</ol>
この例では、受信して処理した結果を返せないため、
処理の全体(クライアントに通知するまで)が完了できないままになってしまう。
これを防ぐには、以下のような順番で処理すればよい。
<OL>
<LI>サーバにおいて、書きこみバッファに空きがあるか調べる。
<LI>空きがあるなら要求を受信する。
<LI>それを処理し、クライアントへ処理結果を返す。
</ol>
このような定型的な処理をVCEに任せてしまうために、
vce_tcpcontext_set_conn_safety_read,  vce_tcpcontext_set_circ_safety_read
の2関数が用意されている。
これらの関数を使用すれば、読みこみの前に書きこみバッファの空きを
確認するので、アプリケーション側で、
書きこめなかった場合の処理をする必要がなくなる。
この関数は、どのようなタイミングで呼びだしても、効果をもつ。
VCEでは以上の機能を「安全な読みこみ(safe read)」と名付ける。
受信と送信のサイズ差があまりないアプリケーションで送信バッファが
比較的小さい場合は  per の値は50?80程度がよく、
送信バッファが十分に大きい場合は10?20でよい。
デフォルトでは、 per の値は0であり、
書きこみバッファの空きがないときでも読みこみ処理を行なう。


------------------------------------------------------
vce_tcpcontext_set_equal_io_splitrate Description

vce_heartbeat では，
VCE が確保している書きこみバッファにデータがたまっている場合は
ネットワークへのデータ送信を試みる．
デフォルトでは，1回の vce_heartbeat
内で全てのデータをフラッシュしようとするが，
送信したい量が1回に数百KB?数MBに達する場合などは，
送信データが OS の送信用メモリ
(Linuxの場合は，TCP用に確保されているメモリページ)を溢れさせて，
一部のコネクションの送信パフォーマンスが著しく低下してしまう場合がある．
本関数を使って，
複数回の heartbeat でコネクションをフラッシュするように調整し，
この問題を回避することができる．
ただし，1回の vce_heartbeat にかかる時間が長い場合は，
あるクライアントからみた round-trip query time は長くなる可能性がある．
本関数を使わずに，Linux自体をチューンする解決策もある．
それに関しては <a href="linuxtune.html">linuxtune.html</a> を参照.


------------------------------------------------------
vce_tcpcontext_set_read_delay arg 2

最小の遅延(ミリ秒)


------------------------------------------------------
vce_tcpcontext_set_read_delay arg 4

遅延の分布。0だと、遅延はminの値に毎回完全に一致する。
1だと、minとmaxの間がまんべんなく分布する。
2だと、ほとんどがmin付近となる(2次)
3だと、もっとほとんどがmin付近となる(3次)
<Pre>
delay = min + (max-min)*(( random() % 100 / 100.0 ) ^ distrib )
</pre>
0未満や5以上など、意味が薄い値を指定したときは、
verboseモードの場合警告を表示する。


------------------------------------------------------
vce_tcpcontext_set_read_delay Description

VCEを使ったアプリケーションを開発するときにはLANを使用するが、
実際のインターネットの遅延をLANで再現したい場合もある。
そのような場合に、本関数を使うとその遅延をシミュレートすることができる。
本関数は、読みこみバッファのデータをパースしてcollbackを呼びだすタイミング
を制御して、アプリケーションにとっての遅延を再現する。
たとえば、普通のダイヤルアップのユーザーが体験する、
200ミリ秒から500ミリ秒の遅延が発生するようなネットワークを再現するには、
<pre>
vce_tcpcontext_set_read_delay( t, 200, 500 ,2 );
</pre>
などといった設定をすればよい。
注意点としては、vce_heartbeat を十分頻繁に呼びだせない場合は、
遅延の設定値を小さくしても意味がなくなる事である。


------------------------------------------------------
vce_tcpcontext_set_read_delay Bugs

現在実装されている遅延シミュレータは非常に単純なものであり、
将来はもっと本格的な遅延シミュレータをサポートする予定である。
その場合は本関数の引数が増えるか、設定値の意味が変化する可能性がある。


------------------------------------------------------
vce_tcpcontext_timeout_control Description

VCE は、TCP セッションにおいて一定時間アクセスがないとタイムアウトさせて
closewatcher を呼びだす機能を持っている。
何らかのデータを送信したり受信したときにタイムアウトのためのカウンタを
初期化するが、
この関数では、送信/受信 成功のときに実際にタイムアウトカウンタをゼロに
戻すかどうかの設定ができる。
VCE はデフォルト状態では、recv_reset=1, send_reset=0 となっている。
つまり、送信に成功しても、タイムアウトカウンタをリセットしない。
この事により、クライアントからは、タイムアウト時間内に最低1個は、
パケットが送られて来ないとタイムアウトしてしまう。
VCE がターゲットとしているリアルタイムアプリケーションにおいては、
このような動作がデフォルトであるほうが自然である。
本関数は、滅多に使われることはない。


------------------------------------------------------
vce_tcpcontext_use_filter_file Description

テキストの設定ファイルからIPフィルターの設定を読みこんで、
TCPコンテキストのフィルター設定を完全に行なう。
conn_t, circ_t 両方とも128個づつのフィルター設定が可能である。
内部的には、 vce_tcpcontext_add_conn_ipv4_filter,
vce_tcpcontext_add_circ_ipv4_filter の2関数を呼びだすだけである。
本関数が認識できるファイルフォーマットは以下の通り。
<pre>
CONTYPE NETWORK NETMASK BASEPOLICY POLICY POLICY ...
# 行頭のシャープ記号の後は、コメントを書くことができる
# 行頭が空白文字の行も読みとばされる。
conn # このように行頭を空けて設定を書くことはできない
</pre>
すべてのトークンをスペース(0x20)で区切り、トークンは
先頭から最低4個(BASEPOLICYまでが)必要である。 VCE C言語APIにおいては、
FILTER_POLICYは OR記号で連結していくSyntaxとなっているので、
POLICYトークンは最低1個から、オプションの数だけ増えていくことができる。
ただし現在は3種類だけである。以下の説明においては、シングルクォートは
設定ファイル中には含まれないことに注意。
<pre>
CONTYPE  'conn' または 'circ' を指定する。
NETWORK  '192.168.1.0' や 'lan.some-game.net' などネットワークアドレス
NETMASK  '255.255.255.0' などネットマスクを指定する。
BASEPOLICY  accept もしくは deny を指定する。
POLICY  現在は log を指定可能である。
</pre>
以下にconnをlocalhostからの接続に限る場合の設定例を示す。
<pre>
conn localhost 255.255.255.255 accept
</pre>
以下は、connはLAN からのみ接続可能でログし(中継サーバの使用を意識している)、
circは日本(202.と 210.)に限定するがログしない場合の設定を示す。
<pre>
conn 192.168.1.0 255.255.255.0 accept log
circ 210.0.0.0 255.0.0.0 accept
circ 202.0.0.0 255.0.0.0 accept
</pre>
有効な1行あたり1下位の vce_tcpcontext_add_circ_ipv4_filter または
vce_tcpcontext_add_conn_ipv4_filter 関数が呼びだされるので、
vce_tcpcontext_add_circ_ipv4_filter,vce_tcpcontext_add_conn_ipv4_filter の
2関数の特徴通り、設定ファイルの設定行が一つでも有効になっていれば
基本的にすべての接続がデフォルトでDENYになることに注意が必要である。
また本関数を呼びだすとまず最初にすべての設定をクリアしてから、
ファイルの中身を実行する。既存の設定が存在する場合は注意が必要である。
ただし、ファイルの中身にフォーマット異常が発見された場合は、
クリアも設定も一切されない。


------------------------------------------------------
vce_utime_diff Description

時刻の差分をマイクロ秒に換算し、VCEI64 型に変換して返す。
この関数は BSD カーネルの time_diff 関数とまったく同じだが、
32ビットマシンで42億マイクロ秒(420秒)を越える時間を返せるように、
VCEI64型としている。


------------------------------------------------------
vce_vecprotocol_pcallback_echo_bin16 Description

VCEではパケットベクトライズを用いて1本のTCPコネクション(conn_t)の中に
仮想回路(circ_t)を含めることができるが、本関数ではその仮想回路への
入力をそのままエコーバックする。
アプリケーションのデバッグ用に使用することができる。

