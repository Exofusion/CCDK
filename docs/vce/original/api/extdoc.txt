このファイルは、 ドキュメントのうち、
どのソースコードにも入らない(シェルでもRubyでもCでもない)ものを含む。

$Revision: 1.4 $
$Date: 2005/09/05 09:10:11 $
$Id: extdoc.txt,v 1.4 2005/09/05 09:10:11 chiaki Exp $
  


<categorydesc>
<name>core
<desc ja>
coreカテゴリに含まれる関数群は、
VCEのライブラリを駆動するために必要な、
基本的な関数の集まりである。
ループを制御したり、VCE自体の初期化や解放を行なう。
Win32 環境においては、
vce_initialize 関数では、 Winsockの初期化もおこなう。
vce_errout_?? 関数では、VCEアプリケーションのログ出力の操作を行なう。
</desc>
<desc en>
 Core functions are basic functions for VCE applications.
Major functionality is controlling application's main loop,
VCE initialization, and cleaning up.
  In Win32 environment, winsock initialization is done in
vce_initialize function.
vce_errout_?? functions are designed to output application error log
to file or stdout.
</desc>
</categorydesc>

<categorydesc>
<name>tcp
<desc ja>
tcpカテゴリでは、tcpcontext_t 型の操作を通して、
VCEの主ターゲットプロトコルであるTCPに関する基本機能を実装している。
Blowfish/Twofish/Rijndael を用いた暗号化や、
Diffie-Hellmanによる鍵交換、
パケットベクトライザ、圧縮など、通信に必要な基本的機能の集合である。
tcpカテゴリの関数の働きを理解するには、
VCEにおける
<a href="tcpcontext.html">TCPコネクション管理システムの仕組</a>
を理解することが必要である。
</desc>
<desc en>
</desc>
</categorydesc>



<categorydesc>
<name>text
<desc ja>
text カテゴリの関数群は、
HTTPプロトコルのヘッダや，サーバの設定ファイルなど，
複雑な構造を持たないテキストを高速に処理するためにデザインされている。
したがって，日本語文字変換などの高度な機能は含まれていない．
特に HTTP 関係の関数は，VCE を用いてHTTPサーバを作成する場合には有効である．
</desc>
<desc en>
</desc>
</categorydesc>


<categorydesc>
<name>util
<desc ja>
utilカテゴリの関数群は、
VCEアプリケーションの開発をしていく時に有用である。
特に暗号化ルーチンやハッシュのルーチンを使うための関数群などが有用である．
</desc>
<desc en>
</desc>
</categorydesc>

<categorydesc>
<name>err
<desc ja>
VCE内部のエラーコードに関する処理をする関数群。
基本的に vce_get_last_error してから その返り値を vce_strerror する。
</desc>
<desc en>
</desc>
</categorydesc>


<categorydesc>
<name>array
<desc ja>
VCE内に配列を定義する。
配列は、構造体など任意のサイズのバッファの列として管理される。
arrayカテゴリの関数は、
「配列からの割りあて」「解放」「スキャン」を、
空き要素リストを利用することで高速に行なうために整備されている。
有限個の資源を割りあてたり解放したりを高速に行なうことは、
サーバプログラムに限らず多いが、
その部分を根本的に高速化する事を主眼に置いている。
パケットベクトライザやsearchカテゴリの関数では、
内部的にarrayカテゴリの関数を使っているが、
ユーザアプリケーションにおいても使うことができるように解放する。
</desc>
<desc en>
</desc>

</categorydesc>

<categorydesc>
<name>search
<desc ja>
searchカテゴリの関数群は、「オンメモリの超高速検索」を実装している。
すべて、「キー」から「値へのポインタ」を引きだすという感じで使う。
キーには 32bit int, 2個の32bit int, 16文字までのstring の3種類を
指定することができる。<BR>
searchカテゴリの関数は汎用性のかわりに高速性が必要な場合に使うべきである。
設定次第では100万エントリの中からの検索を数マイクロ秒で実行することができる。
VCEの内部では、パケットベクトライザのIPアドレスからソケット番号への変換
(sockhash)ルーチン内部で使用している。
search関数群の性能が最大になるのは、数万の要素の中から検索する時である。<BR>
値へのポインタは、配列の要素へのポインタとするのが最も使いやすいだろう。
配列の要素へのポインタは、array カテゴリの関数を用いれば簡単に作ることが
できるので、 arrayと search はよく併用される。
<BR><BR>
検索のアルゴリズムは、
「有限数のハッシュテーブル」を用いて検索のスキャンループの回数を減らす
方式である。
単純に考えると、N要素の値を保存している場合、
普通にキーから見つけだすには最大N回のループが必要だが、
M要素のハッシュテーブルがあれば、ループ回数がM分の1となり検索が高速化される。
よってたとえば100万個の値が保存されているデータベースの場合は、
10万程度のハッシュサイズにしておくと平均ループ回数が10となり、
性能は10万倍に向上する(ハッシュのサイズ倍になるとしてよい。)
<BR><BR>
またvce_init_*_search 関数はインデクスを再利用する．
つまり，検索エンジンの生成と解放を繰りかえすと，
同じindexが振られることがある．
</desc>
<desc en>
</desc>

</categorydesc>

<categorydesc>
<name>parser
<desc ja>
parserカテゴリに属する関数群は、
conn_t コネクションまたは circ_t コネクションからの入力を
レコード単位に分割し、分割されたレコードごとにコールバック関数を呼びだす。
VCE ではこのようにレコード単位のプロトコル処理を基本としている。
</desc>
<desc en>
</desc>
</categorydesc>


<categorydesc>
<name>pcallback
<desc ja>
pcallback カテゴリに属する関数群は、
parser によってレコード単位に分割されたデータを処理するためのコールバック
関数である。通常のアプリケーションでは、
このコールバック関数の内容はアプリケーション開発者によって定義されるが、
エコーやダンプなど基本的な内容のコールバック関数はあらかじめ VCE
に内蔵されているため、デバッグの目的に使用することができる。
pcallback 関数には、 conn_t コネクション用のものと circ_t コネクション用
のものとがある。
</desc>
<desc en>
</desc>
</categorydesc>


<categorydesc>
<name>watcher
<desc ja>
watcher カテゴリの関数群は、conn_t または circ_t コネクションを
新規に受けいれ(accept)したり、閉じられたりしたときにそれを検知するための
コールバック関数群である。現在は acceptwatcher と closewatcher
が存在する。
</desc>
<desc en>
</desc>
</categorydesc>


<categorydesc>
<name>task
<desc ja>
task カテゴリの関数群は、コールバックを基本に動作する、
プロセス内の擬似タスクを実現する。マイクロ秒(実際には vce_heartbeat の
呼びだし頻度に影響される)単位のインターバルと、
タイマーのチェック解像度を調節してサーバの負荷を自由にチューニングできる。
VCE 自体によっても使われる他、アプリケーションからも、
NPC を一定間隔で移動させたり、
タイマー的な処理を繰りかえさせたりといった処理に使うことができる。
コーディングは、まず vce_taskgroup_create を呼びだしてタスクグループを
作成する。次に vce_taskcontext_create 関数により、
各グループに属するタスクを生成する。
グループ単位でタイマーチェックの解像度を設定できる。
</desc>
<desc en>
</desc>
</categorydesc>


<categorydesc>
<name>bin
<desc ja>
bin カテゴリの関数群は，データの pack/unpack を実装している．
データストリームに対してバイナリデータやテキストデータを
出力していく．
この関数群は通常，アプリケーションによって使われることは少ないが，
gen.rb スタブジェネレータの出力コードではこの関数群を基本的に使用している．
</desc>
<desc en>
</desc>
</categorydesc>



<categorydesc>
<name>profiler
<desc ja>
profiler カテゴリの関数群は，動的に動作設定と状態取得が可能な，
プロファイリング(動作性能検査)ツールを提供する．
マイクロ秒単位のタイマを必要とするため，
現在では linux でのみサポートされている．
内部的に gettimeofday を使用するため，プログラムの動作速度は，
若干低下する．
</desc>
<desc en>
</desc>
</categorydesc>

<categorydesc>
<name>monitor
<desc ja>
monitor カテゴリの関数群は，
常時稼働するサーバープロセスをリモートから監視，
操作するための単純なAPIを提供する．
モニター用関数群は大きくわけてサーバー用APIとクライアント用APIに
わかれていて，
監視されるプロセスではサーバー側(vce_monitor_server_???)関数を用い，
監視するプロセスではクライアント側(vce_monitor_client_???)関数
を用いることになる．
つまり，監視する側から監視される側に対してTCPのセッションを張って
情報を取得する構造をもっている．
監視や操作はセキュリティを保つことが必要であるため，
暗号化はもちろん，パスワードによる認証もサポートしている．
機能や文字列フォーマットに関する詳細については，
<a href="monitor.html">「VCEモニタリング」</a>を参照．
</desc>
</categorydesc>

<categorydesc>
<name>analyzer
<desc ja>
analyzer カテゴリの関数群は，
gen.rbによって生成されたプロトコルの送信、受信部分にラップすることで
各プロトコルの送信したbyte数、回数、送信に失敗したbyte数、回数などをチェックすることが
できる。
</desc>
<desc en>
PENDING
</desc>
</categorydesc>

<categorydesc>
<name>log
<desc ja>
logカテゴリに含まれる関数群は、
VCEログフォーマットに基づいたログの出力のための関数の集まりである。
このAPIを使用して出力されたログは、VCE Admin Tool を使用することで
統合的に検索、保存ができる。
VCEログフォーマットについては、<a href="monitor.html">「VCEモニタリング」</a>を参照。
</desc>
<desc en>
PENDING
</desc>
</categorydesc>

<categorydesc>
<name>logwriter
<desc ja>
logwriter カテゴリに含まれる関数群は、
ログを収集するリモートサーバ(rsv)にログを転送するための関数の集まりである。
転送するログは、VCEログフォーマットに基いている。
モニター機能やログフォーマットに関する詳細については、
<a href="monitor.html">「VCEモニタリング」</a>を参照。
</desc>
<desc en>
PENDING
</desc>
</categorydesc>



<file>
<name>vce.h
<sum ja>C言語 VCEヘッダファイル
<sum en>VCE header file for C language
<arch>linux,win32,ps2,darwin
<desc ja>
vce.h はVCEgg APIのすべての関数のプロトタイプ宣言や、
extern変数宣言を含む。<BR><BR>
<B>C++環境でコンパイルする場合の注意</B><BR>
コンパイラに __cplusplusマクロを定義するように指定してしている状態でコンパイル
すること。 VCEggのコードは本来UNIXのC言語で作られているためC言語のlinkageを持つが、
たとえばマイクロソフト VisualStudio などではC++ linkage がデフォルトであり、
C言語linkage されている関数を使うためには <code>extern "C" </code>して
プロトタイプ宣言する必要があるためである。
</desc>
<desc en>
vce.h includes a prototype declaration and an extern variable
declaration for all functions of VCEgg API. <BR>
<B>Notes for compiling under a C++ environment</B>
 A compiler must be specified to define _the cplusplus macro.
VCEgg's code is essentially written with UNIX's C so it has the "linkage" of C.
Microsoft VisualStudio, for instance, has "C++ linkage" as default,
so a prototype declaration by <code>extern "C" </code> is required
to use functions with a C linkage. 
</desc>
</file>



<file>
<name>libvce.a
<arch>linux,darwin
<sum ja>VCE for Linux static リンクライブラリ
<sum en>VCE for Linux static-link library
<desc ja>
libvce.a は Linux用のstatic リンク用ライブラリである。
VCE のすべての関数が定義されている。
実際にパッケージに含まれているライブラリファイル名は、
<pre>
libvce-0_2_1.a    (32bit Linux用)
libvce64-0_2_1.a  (64bit Linux用)
</pre>
というような名前になっているが、マニュアル中ではすべて、 libvce.a
という表記になっている。<br>
VCEのユーザは、このファイルの名前をできるだけ変更せずにアプリケーションと
リンクするのが望ましい。その理由は、もしも名前を変更してしまうと、
VCEがバージョンアップしたときに問題が発生した場合、
その問題を追いかけにくくなるからである。<BR><BR>
<B>依存ライブラリ</B><BR>
VCEgg においては、 GNU の GMP ライブラリ(3.0)と GNU の C ライブラリ(2.1.2)
に依存している。GMPライブラリはセキュリティルーチンの多倍長整数演算のために、
Cライブラリはファイルやそのほか、あらゆる機能において依存している。
現在コミュニティーエンジンではGMPライブラリに依存しない
オリジナル演算ルーチンを開発しているが、GMPは計算速度において常に
世界トップクラスであるため、
アプリケーション開発者のポリシーに基づいて選択できるようにしていく。

</desc>
<desc en>
vce.h includes a prototype declaration and an extern variable
declaration for all functions of VCEgg API. <BR>
<B>Notes for compiling under a C++ environment</B>
 A compiler must be specified to define _the cplusplus macro.
VCEgg's code is essentially written with UNIX's C so it has the "linkage" of C.
Microsoft VisualStudio, for instance, has "C++ linkage" as default,
so a prototype declaration by <code>extern "C" </code> is required
to use functions with a C linkage. 
</desc>
</file>

#<file>
#<name>vce.so
#<arch>linux
#<sum ja>オブジェクト指向スクリプト言語Ruby用拡張共有ライブラリファイル
#<sum en>Shared extention library file for Ruby
#<desc ja>
#VCEをオブジェクト指向スクリプト言語 Ruby 用の拡張ライブラリとして利用
#するための共有ライブラリ。Rubyからvce.so を利用するには、
#rubyの拡張ライブラリ検索パスに含まれるディレクトリに、
#vce.so を置き、
#<pre>
#require "vce"
#</pre>
#という文を書く。プログラミングに関しては、VCE/Ruby APIリファレンスと、
#サンプルコードを参照。
#</desc>
#<desc en>
#vce.so is a shared library that allows developers to use VCE
#as an extension library for the object oriented script language "Ruby".
#To use vce.so from Ruby, place "vce.so" under the directory included in the
#search path for Ruby's extension library, and write 
#<pre>
#require "vce"
#</pre>
#As for programming, refer to "VCE/Ruby/API Reference" and
#provided sample codes.
#</desc>
#</file>


<file>
<name>vcewin32.lib
<arch>win32
<sum ja>Windows 98/NT/2000/XP/Vista 用静的リンクライブラリファイル
<sum en>VCE for Windows 98/NT/2000/XP/Vista static-link library file
<desc ja>
vcewin32.lib は、Win32環境用のライブラリファイルである。
コンパイルには VisualStudio .NET 2003 を使用している。
基本的にVCEの機能のほとんどが含まれている。
<BR>
vcewin32.lib のVCEパッケージ内のファイル名は、
<pre>
vcewin32_1_0_0.lib
vcewin32_1_0_0mt.lib
vcewin32_1_0_0mfc.lib
</pre>
のようになっており、<BR>
最後にmtが付いている場合は、マルチスレッド用ライブラリ、<BR>
mfcが付いている場合は、MFC対応版ライブラリ である。<BR>
常にバージョンに関する混同をなくすため、
このファイル名をできるだけ変更せずに利用することが望ましい。
どうしても開発プロジェクトにおいてファイル名を変更をしたくない場合は、
windowsショートカットを作成して利用すればよい。<BR><BR>
<b>Visual Studio .NET 2003 で使用する場合の注意：</b><BR>
vcewin32.lib をリンクする場合は、プロジェクト設定のランタイムライブラリを
 シングルスレッドに、
vcewin32_mt.lib の場合は、マルチスレッドに設定しなくてはいけない。<br>
</desc>
<desc en>
vcewin32.lib is the library file for Win32 environment.
 VisualStudio 6.0 is used for compilation.
 Basically it includes most of the VCE's functions.  <BR> 
The file name of vcewin32.lib  in the VCE package is 
<pre>
vcewin32_1_0_0.lib
vcewin32_1_0_0mt.lib
vcewin32_1_0_0mfc.lib
</pre>
It is recommended not to change this file name as much as possible to avoid
confusion on the versions.  If you do not wish to change the file name for a
development project, simply create a Window shortcut.  The file including "mt"
in the file name is the library to link with a multi-thread
version of the C library.  
</desc>
</file>


<tool>
<name>gen.rb
<arch>linux(32bit/64bit),win32
<sum ja>プロトコル処理用関数自動生成する
<sum en>Automatically generate protocol processing
<usage ja>
ruby gen.rb [オプション] プロトコル定義ファイル名
</usage>
<usage en>
ruby gen.rb [OPTION] CONFIGURATION_FILE_NAME
</usage>
<desc ja>
簡単な書式のプロトコル定義ファイルを読みこみ、Win32/UNIXでコンパイル可能な C言語ソースコード、Rubyから利用可能なRubyのソースコードを出力する。
VCE上のRPCを簡単に実現するためのツールである。<br>
詳細は、<a href="gen.html">gen.rb プロトコルジェネレータリファレンス</a>を参照。
</desc>
<desc en>
gen.rb reads a configuration file and then output C source code which can be
compiled on Win32/UNIX and Ruby source code which can be used with Ruby.
This tool easily implements RPC on VCE.
</desc>
</tool>


<tool>
<name>swp
<arch>linux(32bit/64bit),win32
<sum ja>コネクションスイッチ中継サーバ
<sum en>relay server
<usage ja>
swp 設定ファイル サーバリスト
</usage>
<usage en>
swp CONFIG_FILE SWITCHTABLE_FILE
</usage>
<desc ja>
アプリケーションのクライアントとサーバの間におく中継用サーバである。
<pre>
swp     (32bit Linux用)
swp_64  (64bit Linux用)
swp.exe (32bit Windows用)
</pre>
パケットの暗号化/復号化や圧縮/解凍の処理をswpが全て引き受けることによって、
サーバのトランザクション処理性能を向上させることができる。
また、swpを設置することによってサーバとクライアント間に一種のゲートウェイが
介在することになるため、セキュリティが向上する。<br>
swpにはスイッチング機能も備えているが、
クライアント、サーバ間のレスポンスが良くなった現在では、
ほとんどのアプリケーションではクライアント側でスイッチング機能を組込むことを
推奨する。
swpでスイッチングを行うことによりサーバ側により複雑なロジックが組込まれる
ことになり、デバッグが困難になるからである。
VCE 2.0 ではswpの仕様は大きく変る予定である。<br>
詳細は、<a href="switch.html">SWP 機能解説</a>を参照。<br><br>
<b>Windows版を使用するときの注意</b><br>
Windowsでは、OSの仕様により、同じポートを使用して複数のswpを起動することができる(bind errorは発生しない)。起動時に注意が必要である。<br>
</desc>
<desc en>
PENDING
</desc>
</tool>

<tool>
<name>swpadm
<arch>linux(32bit/64bit),win32
<sum ja>swpのリモート操作用ツール
<sum en>a tool for swp remote operation
<usage ja>
swp 設定ファイル サーバリスト
</usage>
<usage en>
swpadm ホスト名 ポート キー 引数1 引数2 引数3 ...
</usage>
<desc ja>
<pre>
swpadm     (32bit Linux用)
swpadm_64  (64bit Linux用)
swpadm.exe (32bit Windows用)
</pre>
詳細は、<a href="switch.html#swpadm">SWP 機能解説</a>を参照。
</desc>
<desc en>
PENDING
</desc>
<sample ja>
<pre>swpadm localhost 9002 key shutdown</pre>
</sample>
<sample en>
<pre>swpadm localhost 9002 key shutdown</pre>
</sample>
</tool>


<tool>
<name>stderrback.rb
<arch>linux(32bit)
<sum ja>VCEのログ出力ファイルを自動的に圧縮
<sum en>Automatically compress VCE's log files
<usage ja>
ruby stderrback.rb ディレクトリ名
</usage>
<usage en>
ruby stderrback.rb DIRNAME
</usage>
<desc ja>
指定したディレクトリの中のログファイル(stderr.N形式)で最新でないものを
自動的に圧縮する。圧縮までしかしないので、
圧縮されたものを取りだすのは手作業で取りだす。
cron を使って一定時間ごとにチェックするようにしておけば便利である。
gzip プログラムに依存している。
</desc>
<update ja>2000年8月
<update en>2000Aug
</tool>

<tool>
<name>bufsplice
<arch>linux(32bit)
<sum ja>ファイルの内容を短冊状に切り出して、stdoutに表示する
<sum en>PENDING
<usage ja>
bufsplice INFILE N M
</usage>
<usage en>
bufsplice INFILE N M
</usage>
<desc ja>
NバイトごとにMバイトを出力する。
共有メモリのチェック用である。
</desc>
<desc en>
PENDING
</desc en>
</tool>

<tool>
<name>shasum
<arch>linux(32bit)
<sum ja>SHA-1 でファイルチェックサムを取得する
<sum en>PENDING
<usage ja>
shasum INFILE
</usage>
<usage en>
shasum INFILE
</usage>
<desc ja>
<a href="vce-api.html#vce_sha1_file_checksum">vce_sha1_file_checksum関数</a>
を用いてファイルのチェックサムを取得する。
</desc>
<desc en>
PENDING
</desc>
</tool>

<tool>
<name>vceprof.rb
<arch>linux(32bit)
<sum ja>topコマンドの出力を画像化する。
<sum en>PENDING
<usage ja>
ruby vceprof.rb [サーバプログラム名]
</usage>
<usage en>
PENDING
</usage>
<desc ja>
topコマンドの出力をgnuplotを使って画像にするスクリプト。ruby 1.8.0以上、gnuplot 3.5以上が必要。詳細は、<a href="vceprof.html">パフォーマンス計測ツール</a> を参照。
</desc>
<desc en>
PENDING
</desc>
<sample ja>
<pre>top -b -n240 -d1 -p15578 > vceprof.txt
ruby vceprof.rb gmsv</pre>
</sample>
<sample en>
<pre>top -b -n240 -d1 -p15578 > vceprof.txt
ruby vceprof.rb gmsv</pre>
</sample>
</tool>
